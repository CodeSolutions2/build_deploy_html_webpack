name: Deploy React with GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - '**.txt'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false      

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Step 0 - Checkout - put the repository files into the Github Actions runner
        uses: actions/checkout@v4

      - name: Step 1 - Setup Pages
        uses: actions/configure-pages@v5

      - name: Step 2 - Setup/install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Step 3 - Install the React compiler - it converts the files in to browser readable files
        run: |
          npm install react@latest react-dom@latest --save;
          npm install -g webpack webpack-cli

      - name: Step 4 - Reduce many linked files into one output file (main.js)  - src/index.js input will create dist/main.js output. One can also use (npm run build) for package.json.
      # Without configuration file: https://webpack.js.org/api/cli/#without-configuration-file
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN || github.token }}
        run: |
          git config --global user.email "j622amilah@gmail.com";
          git config --global user.name "CodeSolutions2";
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/CodeSolutions2/temp_repo_GithubPagesDeploymentTests.git;
          npx webpack --entry "/home/runner/work/temp_repo_GithubPagesDeploymentTests/temp_repo_GithubPagesDeploymentTests/src/index.js" --output-path "/home/runner/work/temp_repo_GithubPagesDeploymentTests/temp_repo_GithubPagesDeploymentTests/dist/" --output-filename "main.js" --define-process-env-node-env "none" --optimization-node-env "none";
          git reset
          git add /home/runner/work/temp_repo_GithubPagesDeploymentTests/temp_repo_GithubPagesDeploymentTests/dist/main.js
          git commit -m "Updating repository"
          git push

      - name: Step 5 - Print/Compile (main.js via index.html) using Node.js. Read the main.js file via index.html, push the output html to repository
      # Node.js can be used in many ways- 0. it is a JavaScript derived language that has a library packing system, 1. it is a type of browser/networking environment without a graphical interface, that sends/receives data to a port. Any Node.js file reader can read an html file that references a javaScript file, written in Node.js and then display the correct HTML file. The type of file that one inputs into a Node.js file reader, one receives the same output file type. Thus, if an HTML file is inputted into a file reader the corresponding output will be an HTML file. 
      # Idea 0: just read the index.html file using the file reader and save the output html to the repository.
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN || github.token }}
        with:
          github-token: ${{ secrets.TOKEN || github.token }}
          script: |
            const fs = require('fs');

            // Read main.js to confirm it has access
            // const main_js = await fs.promises.readFile('/home/runner/work/temp_repo_GithubPagesDeploymentTests/temp_repo_GithubPagesDeploymentTests/dist/main.js', 'utf8');
            // console.log('main_js: ', main_js);
            // RESULT: the main_js is node.js text
            
            const compiled_html = await fs.promises.readFile('./dist/nodejs_reference_index.html', 'utf8');
            console.log('compiled_html: ', compiled_html.slice(0,100));
            // RESULT: compiled_html is the text in the ./dist/nodejs_reference_index.html file without inserting the main_js text into it
            
            fs.writeFileSync('./dist/index.html', compiled_html);
            // RESULT: Does not save the file to the repository, but deploy job seems to deploy the page
            
     #  - name: Step 6 - Save index.html to repository
     #    env:
     #      GITHUB_TOKEN: ${{ secrets.TOKEN || github.token }}
     #    run: |
     #      git config --global user.email "j622amilah@gmail.com";
     #      git config --global user.name "CodeSolutions2";
     #      git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/CodeSolutions2/temp_repo_GithubPagesDeploymentTests.git;
     #      git add ./dist/index.html
     #      git commit -m "Updating repository"
     #      git push
     # RESULT: has the same template as ./dist/nodejs_reference_index.html; with reference to main.js
            
      - name: Step 6 - Upload Artifact - update files in the repository
        uses: actions/upload-pages-artifact@v3
        with:
          # location of the artifacts
          path: "./dist"

      

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
